name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "hotfix/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  bandit-sast:
    name: 🐍 Python SAST (Bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Bandit
        run: pip install bandit
      - name: Run Bandit
        run: bandit -r backend/ -ll
        # Store scan results for later reporting
      - name: Save Bandit results
        if: always()
        run: |
          mkdir -p .ark7_hyperlogs/security
          bandit -r backend/ -f json -o .ark7_hyperlogs/security/bandit-results.json -ll || true

  safety-audit:
    name: 🔐 Safety Python Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Safety
        run: pip install safety && pip install -r backend/requirements.txt
      - name: Run safety check
        run: safety check
      - name: Save Safety results
        if: always()
        run: |
          mkdir -p .ark7_hyperlogs/security
          safety check --json > .ark7_hyperlogs/security/safety-results.json || true

  npm-audit:
    name: 📦 npm Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > ../npm-audit-results.json || true
      - name: Display npm audit results
        run: npm audit --audit-level=moderate || true
      - name: Save npm audit results
        if: always()
        run: |
          mkdir -p ../.ark7_hyperlogs/security
          cp ../npm-audit-results.json ../.ark7_hyperlogs/security/ || true

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.10.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Typecheck
        run: pnpm run typecheck

      - name: Lint
        run: pnpm run lint

      - name: Unit tests
        run: pnpm run test:unit

      - name: Build
        run: pnpm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.10.0
          run-install: false

      - name: Install dependencies
        run: pnpm install

      - name: Run security audit
        run: pnpm audit || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Save Trivy results
        run: |
          mkdir -p .ark7_hyperlogs/security
          trivy fs --format json -o .ark7_hyperlogs/security/trivy-fs-results.json . || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ark7-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ark7-frontend:${{ github.sha }}
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Save Docker image scan results
        run: |
          mkdir -p .ark7_hyperlogs/security
          trivy image --format json -o .ark7_hyperlogs/security/trivy-docker-results.json ark7-frontend:${{ github.sha }} || true

      - name: Run Hadolint on Dockerfile
        run: |
          mkdir -p .ark7_hyperlogs/security
          docker run --rm -i hadolint/hadolint < Dockerfile > .ark7_hyperlogs/security/hadolint-results.txt || true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.10.0
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Deploy to Vercel Preview
        run: pnpm run deploy:preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.10.0
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Deploy to Production
        run: pnpm run deploy:ci
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: ${{ failure() && startsWith(github.ref, 'refs/heads/hotfix/') }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        run: |
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }} --yes
          echo "## Rollback Results" > .ark7_hyperlogs/deployment/rollback-results.md
          echo "⚠️ Rolled back due to failure in hotfix branch" >> .ark7_hyperlogs/deployment/rollback-results.md
          echo "Timestamp: $(date)" >> .ark7_hyperlogs/deployment/rollback-results.md

  security-report:
    name: Generate Security Reports
    runs-on: ubuntu-latest
    needs: [npm-audit, safety-audit, bandit-sast, security-scan, docker-build]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Collect security results
        run: |
          mkdir -p .ark7_hyperlogs/security
          mkdir -p .ark7_hyperlogs/reports

          # Generate comprehensive security report
          echo "# Security Scan Report" > .ark7_hyperlogs/reports/security-report.md
          echo "Generated: $(date)" >> .ark7_hyperlogs/reports/security-report.md
          echo "" >> .ark7_hyperlogs/reports/security-report.md

          echo "## NPM Audit Summary" >> .ark7_hyperlogs/reports/security-report.md
          if [ -f ".ark7_hyperlogs/security/npm-audit-results.json" ]; then
            echo "NPM audit completed. Check the JSON file for detailed results." >> .ark7_hyperlogs/reports/security-report.md
          else
            echo "NPM audit results not found." >> .ark7_hyperlogs/reports/security-report.md
          fi
          echo "" >> .ark7_hyperlogs/reports/security-report.md

          echo "## Python Safety Check Summary" >> .ark7_hyperlogs/reports/security-report.md
          if [ -f ".ark7_hyperlogs/security/safety-results.json" ]; then
            echo "Safety check completed. Check the JSON file for detailed results." >> .ark7_hyperlogs/reports/security-report.md
          else
            echo "Safety check results not found." >> .ark7_hyperlogs/reports/security-report.md
          fi
          echo "" >> .ark7_hyperlogs/reports/security-report.md

          echo "## Bandit SAST Summary" >> .ark7_hyperlogs/reports/security-report.md
          if [ -f ".ark7_hyperlogs/security/bandit-results.json" ]; then
            echo "Bandit scan completed. Check the JSON file for detailed results." >> .ark7_hyperlogs/reports/security-report.md
          else
            echo "Bandit scan results not found." >> .ark7_hyperlogs/reports/security-report.md
          fi

          # Generate Docker security report
          echo "# Container Security Report" > .ark7_hyperlogs/reports/container-security-report.md
          echo "Generated: $(date)" >> .ark7_hyperlogs/reports/container-security-report.md
          echo "" >> .ark7_hyperlogs/reports/container-security-report.md

          echo "## Trivy Docker Scan Results" >> .ark7_hyperlogs/reports/container-security-report.md
          if [ -f ".ark7_hyperlogs/security/trivy-docker-results.json" ]; then
            echo "Trivy Docker scan completed. Check the JSON file for detailed results." >> .ark7_hyperlogs/reports/container-security-report.md
          else
            echo "Trivy Docker scan results not found." >> .ark7_hyperlogs/reports/container-security-report.md
          fi

          echo "## Docker Best Practices Analysis" > .ark7_hyperlogs/reports/docker_audit_summary.md
          echo "Generated: $(date)" >> .ark7_hyperlogs/reports/docker_audit_summary.md
          echo "" >> .ark7_hyperlogs/reports/docker_audit_summary.md

          if [ -f ".ark7_hyperlogs/security/hadolint-results.txt" ]; then
            echo "### Hadolint Results" >> .ark7_hyperlogs/reports/docker_audit_summary.md
            echo "```" >> .ark7_hyperlogs/reports/docker_audit_summary.md
            cat .ark7_hyperlogs/security/hadolint-results.txt >> .ark7_hyperlogs/reports/docker_audit_summary.md
            echo "```" >> .ark7_hyperlogs/reports/docker_audit_summary.md
          else
            echo "Hadolint results not found." >> .ark7_hyperlogs/reports/docker_audit_summary.md
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: .ark7_hyperlogs/reports/
          retention-days: 14
